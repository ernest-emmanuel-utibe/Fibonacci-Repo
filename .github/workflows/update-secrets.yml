name: Update AWS Secrets Manager

on:
  push:
    branches:
      - master  # or any branch you want to trigger the update

jobs:
  update-secrets:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install boto3

      - name: Update AWS Secrets Manager
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          API_KEY: ${{ secrets.API_KEY }}
          # Add other secrets here
        run: |
          python << EOF
          import os
          import json
          import boto3

          # Define the AWS Secrets Manager client
          secrets_client = boto3.client('secretsmanager')

          # Specify the secret name
          SECRET_NAME = "test-secrets-update"
          SECRET_REGION = os.getenv('AWS_REGION')

          # Function to get the current secret value
          def get_secret_value(secret_name):
              response = secrets_client.get_secret_value(SecretId=secret_name)
              secret = json.loads(response['SecretString'])
              return secret

          # Function to update the secret value
          def update_secret_value(secret_name, new_secret):
              response = secrets_client.update_secret(
                  SecretId=secret_name,
                  SecretString=json.dumps(new_secret)
              )
              return response

          # Get current environment variables from AWS Secrets Manager
          current_secret = get_secret_value(SECRET_NAME)

          # Load environment variables from GitHub Secrets
          local_env_vars = {
              'DATABASE_URL': os.getenv('DATABASE_URL'),
              'API_KEY': os.getenv('API_KEY'),
              # Add other environment variables here
          }

          # Check for changes and update the secret
          changes_detected = False
          for key, value in local_env_vars.items():
              if key not in current_secret or current_secret[key] != value:
                  current_secret[key] = value
                  changes_detected = True

          if changes_detected:
              update_secret_value(SECRET_NAME, current_secret)
              print("Environment variables updated in AWS Secrets Manager.")
          else:
              print("No changes detected in environment variables.")

          # Optionally, remove any keys from AWS Secrets Manager that are no longer in the GitHub Secrets
          keys_to_remove = [key for key in current_secret if key not in local_env_vars]
          for key in keys_to_remove:
              del current_secret[key]
              changes_detected = True

          if changes_detected:
              update_secret_value(SECRET_NAME, current_secret)
              print("Removed obsolete environment variables from AWS Secrets Manager.")
          else:
              print("No obsolete environment variables found.")
          EOF
